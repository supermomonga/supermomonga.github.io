<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>かなりすごいブログ</title>
  <subtitle>かなりすごい（かなり）</subtitle>
  <id>http://blog.supermomonga.com/</id>
  <link href="http://blog.supermomonga.com/"/>
  <link href="http://blog.supermomonga.com/feed.xml" rel="self"/>
  <updated>2014-12-25T00:00:00+09:00</updated>
  <author>
    <name>supermomonga</name>
  </author>
  <entry>
    <title>Rubyで不適切なFizzBuzz書いた</title>
    <link rel="alternate" href="http://blog.supermomonga.com/articles/ruby/fizzbuzz-ruby.html"/>
    <id>http://blog.supermomonga.com/articles/ruby/fizzbuzz-ruby.html</id>
    <published>2014-12-25T00:00:00+09:00</published>
    <updated>2014-12-25T15:19:39+09:00</updated>
    <author>
      <name>supermomonga</name>
    </author>
    <content type="html">&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Kernel&lt;/span&gt;
  &lt;span class="n"&gt;define_method&lt;/span&gt; &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="sx"&gt;%w`Fizz Buzz FizzBuzz`&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;___&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;each_with_index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]*-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;send&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt;
  &lt;span class="n"&gt;___&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:puts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id="おわり"&gt;おわり&lt;/h2&gt;

&lt;p&gt;感じ感じ&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mechanizeでのスクレイピング時、アクセス元IPアドレスを分散させる</title>
    <link rel="alternate" href="http://blog.supermomonga.com/articles/ruby/mechanize-multiple-ipaddress.html"/>
    <id>http://blog.supermomonga.com/articles/ruby/mechanize-multiple-ipaddress.html</id>
    <published>2014-12-17T00:00:00+09:00</published>
    <updated>2014-12-17T10:00:56+09:00</updated>
    <author>
      <name>supermomonga</name>
    </author>
    <content type="html">&lt;h2 id="ruby-advent-calendar-2014-17日目"&gt;Ruby Advent Calendar 2014 17日目&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://qiita.com/advent-calendar/2014/ruby" rel="nofollow"&gt;Ruby Advent Calendar 2014&lt;/a&gt;、17日目の記事になります。&lt;/p&gt;

&lt;h2 id="スクレイピング時にアクセス元のipアドレスを分散させたい"&gt;スクレイピング時にアクセス元のIPアドレスを分散させたい&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.conoha.jp/pricing"&gt;ConoHa VPSではVPS1契約ごとに最大16個の追加IPアドレスを購入できます&lt;/a&gt;。1つあたり200円と安価で、最安のプランで契約し追加IPアドレスを16個オプションで追加すれば、17個のIPアドレスを持つVPSサーバーの出来上がりです。月額4,180円で、1IPアドレスあたり月額約246円です。非常に安価ですね。&lt;/p&gt;

&lt;p&gt;さて、スクレイピング時にアクセス元のIPアドレスを分散させたいということは割とあるかと思います。その是非はここでは置いておくとして、ConoHa VPSを利用することで安価にその土壌となるサーバーを入手できることがわかりました。ただし、Rubyにおいてスクレイピングに有用なgemである&lt;a href="https://rubygems.org/gems/mechanize"&gt;Mechanize&lt;/a&gt;には、指定のネットワークインターフェイスを経由してHTTPアクセスを行うといった機能は付いていません。そこで今回はMechanizeにて任意のネットワークインターフェイスにてスクレイピングを行う方法を解説します。&lt;/p&gt;

&lt;h2 id="コード"&gt;コード&lt;/h2&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mechanize'&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Benrify&lt;/span&gt;
  &lt;span class="n"&gt;refine&lt;/span&gt; &lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Persistent&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;alias_method&lt;/span&gt; &lt;span class="ss"&gt;:connection_for_origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:connection_for&lt;/span&gt;
    &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:local_host&lt;/span&gt;
    &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:local_port&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_for&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection_for_origin&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local_host&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="vi"&gt;@local_host&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local_port&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="vi"&gt;@local_port&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@local_host&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@local_port&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;finish&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;refine&lt;/span&gt; &lt;span class="no"&gt;Mechanize&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_host&lt;/span&gt;
      &lt;span class="vi"&gt;@agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_port&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="no"&gt;Benrify&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;これだけです。&lt;code&gt;Net::HTTP::Persistent&lt;/code&gt;を上書きすることで実現します。クラスの拡張にはRefinementsを使いましょう。&lt;/p&gt;

&lt;h2 id="使用例"&gt;使用例&lt;/h2&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mechanize'&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Benrify&lt;/span&gt;
  &lt;span class="c1"&gt;# 省略&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="no"&gt;Benrify&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="vg"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Mechanize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="vg"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'http://wtfismyip.com/text'&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;local_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getifaddrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ipv4?&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="sr"&gt;/(?:eth|en)\d+(?::\d+)?/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Try: default'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Got: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="n"&gt;local_addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Try: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ip_address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Got: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ip_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Socket.getifaddrs&lt;/code&gt;でネットワークインターフェイスの一覧が取得できるので、そこから好きなものを選んで&lt;code&gt;Mechanize.bind&lt;/code&gt;メソッドにて割り当てを行うだけです。&lt;/p&gt;

&lt;p&gt;この例では、&lt;code&gt;eth&lt;/code&gt;もしくは&lt;code&gt;en&lt;/code&gt;で始まる全てのインターフェイスを取得し、それらをそれぞれ&lt;code&gt;Mechanize.bind&lt;/code&gt;した上で&lt;a href="http://wtfismyip.com/text"&gt;http://wtfismyip.com/text&lt;/a&gt;の内容を取得・表示しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wtfismyip.com/"&gt;http://wtfismyip.com/&lt;/a&gt;は、アクセス元のIPアドレスを表示してくれるウェブサービスです。XMLやJSON、プレインテキストなどの各種フォーマットでレスポンスを返してくれるURLも用意されており便利ですね。&lt;/p&gt;

&lt;h2 id="おわり"&gt;おわり&lt;/h2&gt;

&lt;p&gt;スクレイピング時にアクセス元のIPアドレスを複数に分散させたい、ただし複数のサーバーを用意しそれらを管理する構成を作るほどの規模ではないし、予算も抑えたい。そういった場合にこのような手法が有用かと思います。通常こういったアクセス元IPアドレスの分散を行う場合は面倒なqueueの管理が必要かと思いますが、この方法を用いれば割と雑に組んでもそれなりに動くものができて便利です。&lt;/p&gt;

&lt;p&gt;ConoHa VPS以外にもIPアドレスを追加購入できるVPSサーバーなどがあったら是非教えてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>資本主義の崩壊とEmacs Evilの勃興について</title>
    <link rel="alternate" href="http://blog.supermomonga.com/articles/emacs/evil-advent-calendar.html"/>
    <id>http://blog.supermomonga.com/articles/emacs/evil-advent-calendar.html</id>
    <published>2014-12-01T00:00:00+09:00</published>
    <updated>2014-12-01T06:10:32+09:00</updated>
    <author>
      <name>supermomonga</name>
    </author>
    <content type="html">&lt;h2 id="evil-advent-calendar-1日目"&gt;Evil Advent Calendar 1日目&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://qiita.com/advent-calendar/2014/evil" rel="nofollow"&gt;Evil Advent Calendar 2014&lt;/a&gt;1日目の記事になります。&lt;/p&gt;

&lt;p&gt;明日の執筆者は未定です。というか私含めて2人しかエントリーしていません。Evil使いもっと増えて欲しい（もっと）。&lt;/p&gt;

&lt;p&gt;1日目ということで、今日はポエムです。あとタイトルは考えるのが面倒だったので&lt;a href="http://pha22.net/hotentry/title/r?word=Evil" rel="nofollow"&gt;ホッテントリメーカー&lt;/a&gt;で作りました。&lt;/p&gt;

&lt;h2 id="資本主義の崩壊とemacs-evilの勃興について"&gt;資本主義の崩壊とEmacs Evilの勃興について&lt;/h2&gt;

&lt;h3 id="1."&gt;1.&lt;/h3&gt;

&lt;p&gt;Emacsは単なるテキストエディタではなく、アプリケーション実行環境です。その表現力の高さから、ウェブブラウザやメーラー、IRCクライアントに始まりTwitterクライアントまで、様々なアプリケーションが動作し、それらは基本的に全てキーボードで操作を完結させることができます。それを指しEmacsはテキストエディタではなくOSだと言われることがありますが、まさにその通りだと私は思います。というのも、単なるテキストエディタに画像を表示する機能なんて要らないでしょうし、ましてや&lt;a href="http://www.emacswiki.org/emacs/EmacsXWidgets"&gt;GTKウィジェットを表示できるようにしようという試み&lt;/a&gt;も起こらないでしょう。私は、Emacsが目指しているのはテキストエディタではなくアプリケーション実行環境であるということを明確に感じます。&lt;/p&gt;

&lt;p&gt;そんなEmacsで動くVim風テキストエディタがリリースされたのは自然な流れだと言えます。Emacsデフォルトのテキスト編集機能はVimのそれに遠く及びません。Emacsには様々なアプリケーションを構築するための土台があるのですから、無ければ作ってしまえ、ということなのでしょう。&lt;/p&gt;

&lt;p&gt;そして、この様にEmacsをアプリケーション実行環境として捉え、かつVimに親しみのある私がEmacsにEvilを導入したのは当然の成り行きでした。&lt;/p&gt;

&lt;h3 id="2."&gt;2.&lt;/h3&gt;

&lt;p&gt;Evilは私の想像以上の完成度でした。非常に高いレベルでVimのパラダイムが実現されており、かつEmacs Lispにて容易にその挙動をカスタマイズできる様に設計されていました。Emacs Lispを書くことができる人であれば、Vim scriptを書きVim用のプラグインを作るのと同じ感覚で、Evil用のプラグインを作る事も容易いでしょう。実際に、いくつかの有名なVimプラグインは既にEvil版として移植されています。&lt;/p&gt;

&lt;p&gt;私はEvilに夢中になりました。Vimから本格的にEmacsへ移行しようかとも悩んだほどです。&lt;/p&gt;

&lt;h3 id="3."&gt;3.&lt;/h3&gt;

&lt;p&gt;Evilを使い始めてすぐ、私はその違和感に気づきました。Evilでは、Emacs元々の用語とバッティングしないように、Vimで言うところ&lt;code&gt;モード&lt;/code&gt;を&lt;code&gt;ステート&lt;/code&gt;と読んでいます。&lt;code&gt;挿入ステート&lt;/code&gt;、&lt;code&gt;ビジュアルステート&lt;/code&gt;といった具合です。更に、Vimには（当然）存在しない、元々のEmacsのキーバインドに戻るという、&lt;code&gt;Emacsステート&lt;/code&gt;が存在します。そして、Evilには&lt;code&gt;evil-emacs-state-modes&lt;/code&gt;という設定変数があり、ここに設定したモードでは、自動的にEvilが&lt;code&gt;Emacsステート&lt;/code&gt;に切り替わります。デフォルトで、この変数には多くのモードが設定されています。この機能により、Evilはいわゆるアプリケーション実行環境であるEmacsにおいて、「テキストを編集する時はVimの操作感」を、「テキスト編集時以外はEmacs元々の操作感」を実現しています。&lt;/p&gt;

&lt;p&gt;これは言うなれば、丁度あなたがお使いのOSと同じ様な感覚です。WindowsでもLinuxでもMac OS Xでも何でもよいのですが、Vimを使っている時の操作方法と、その他アプリケーションを使っている時の操作方法は基本的に全く異なるはずです。EmacsにEvilを導入することで、私は「Evilから出て他の操作をEmacs内で行う」時、「Vimから出て他の操作をOS内で行う」のと同じ感覚に駆られました。&lt;/p&gt;

&lt;p&gt;本来なら、EvilがEmacs本来の機能や資産を損なわないように上手に実装されていると褒める所でしょうが、私はこの点について大きな違和感を感じました。&lt;/p&gt;

&lt;h3 id="4."&gt;4.&lt;/h3&gt;

&lt;p&gt;それもそのはずでした。私は、Vimに多くのプラグインを導入し、Vimを単なるテキストエディタとしてでなく、ターミナルに始まり、メーラー、Twitterクライアント、チャットサービスクライアントといった様々な目的で利用していたのです。私は、&lt;code&gt;evil-emacs-state-modes&lt;/code&gt;によって、Vimの世界から突然素のEmacsの世界に引き戻されてしまうことに、非常にストレスを感じていたのです。&lt;/p&gt;

&lt;p&gt;また、例えばVimでは&lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gT&lt;/code&gt;にてタブの切り替えを行えますが、Evilでこれを行うと、&lt;code&gt;Emacsステート&lt;/code&gt;のタブに移動した瞬間、&lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gT&lt;/code&gt;での操作ができなくなり、意図しないタイミングでVimの世界から追い出されてしまうといった様な弊害もありました。&lt;/p&gt;

&lt;p&gt;私はEmacsの世界とVimの世界を行き来することにすっかり辟易してしまいました。Emacsで動く全てのアプリケーションをVimライクに操作したい、そう思った私は、思い切って&lt;code&gt;evil-emacs-state-modes&lt;/code&gt;に&lt;code&gt;nil&lt;/code&gt;を設定しました。&lt;/p&gt;

&lt;h3 id="5."&gt;5.&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;evil-emacs-state-modes&lt;/code&gt;に&lt;code&gt;nil&lt;/code&gt;を設定することで、Emacsで動く各アプリケーションがほぼ全て、まともに動作しなくなりました。アプリケーションごとに独自に&lt;code&gt;Emacsステート&lt;/code&gt;用のキーバインドが設定されており、それを全て無効にしてしまったのですから当然です。&lt;/p&gt;

&lt;p&gt;私を待っていたのは、Emacsで動く全てのモード用に、Vim風のEvilキーバインドを1から割り当てていくという地道な作業でした。更に、Evilによって導入されるステートという独特の概念により、キーバインドの設定をするだけでは上手く動かないアプリケーションも存在します。たとえば、Emacs Lispで実装されたEmacsで動くターミナルエミュレータであるeshellがあります。eshellでは、通常&lt;code&gt;Emacsステート&lt;/code&gt;においてはプロンプト上にカーソルが移動できないようになっていますが、Evilの&lt;code&gt;ノーマルステート&lt;/code&gt;に入る事によってカーソルをプロンプト上に移動することができるようになってしまいます。その状態で&lt;code&gt;x&lt;/code&gt;を打鍵したり、&lt;code&gt;i&lt;/code&gt;を打鍵するなどして&lt;code&gt;挿入ステート&lt;/code&gt;に入ってしまうと、プロンプトを書き換えることができてしまい、eshellの動作に良からぬ影響を及ぼしてしまいます。これを防ぐため、「&lt;code&gt;挿入ステート&lt;/code&gt;に入った後、プロンプトと被らない適切な場所にカーソルを移動する」という関数をEmacs Lispで定義し、eshellモードの&lt;code&gt;ノーマルステート&lt;/code&gt;における&lt;code&gt;i&lt;/code&gt;や&lt;code&gt;a&lt;/code&gt;へのマッピングとして割り当てることが必要でした。その他、私がVimで愛用しているVimShellと同じ操作感を実現するため、多数の独自関数・キーバインドを設定することが必要でした。（余談ですが、私はこうして出来上がったEvil用にカスタマイズされたeshellを、eshellとVimShellにちなんでEvilShellと呼んでいます。）&lt;/p&gt;

&lt;p&gt;この様に、Emacsで動く全てのモードに関して、キーバインドの再定義や動作補助用の関数定義を行うといったことが必要でした。これはとても体力の要る、地道な作業です。「Vimのパラダイムと完全に協調する理想のEmacs」を求め、茨の道へ歩き出してしまったのです。&lt;/p&gt;

&lt;h3 id="6."&gt;6.&lt;/h3&gt;

&lt;p&gt;2014年12月1日現在でも、これらの設定を終えることはできていません。設定を終えた後は、Emacs Lispを習得し、普段愛用しているVimプラグイン達をEvil用に移植していく必要もあります。&lt;/p&gt;

&lt;p&gt;理想のEmacsを手に入れるまでの道のりは長そうですが、私のEmacsが着実に私の理想に近づいていっていることだけは分かります。そして、地道に理想の環境を作リ上げていくのはなんと楽しい事でしょうか。&lt;/p&gt;

&lt;h2 id="おわり"&gt;おわり&lt;/h2&gt;

&lt;p&gt;以上になります。&lt;/p&gt;

&lt;p&gt;Evil、設定に苦労するけど超便利なのでみなさん使っていきましょう。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>homebrewとrbenvでrubyインストールする時のオプション</title>
    <link rel="alternate" href="http://blog.supermomonga.com/articles/ruby/ruby-rbenv-homebrew.html"/>
    <id>http://blog.supermomonga.com/articles/ruby/ruby-rbenv-homebrew.html</id>
    <published>2014-10-22T00:00:00+09:00</published>
    <updated>2014-10-22T06:40:02+09:00</updated>
    <author>
      <name>supermomonga</name>
    </author>
    <content type="html">&lt;h2 id="homebrewとrbenvでrubyインストールする時のオプション"&gt;homebrewとrbenvでrubyインストールする時のオプション&lt;/h2&gt;

&lt;p&gt;適切にオプション指定しないといけないみたいなのがある&lt;/p&gt;

&lt;h3 id="rbenv導入"&gt;rbenv導入&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;brew install rbenv ruby-build&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="依存ライブラリ導入"&gt;依存ライブラリ導入&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;brew install readline openssl libiconv&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="オプションの設定"&gt;オプションの設定&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RUBY_CONFIGURE_OPTS=&amp;quot;--with-readline-dir=&lt;/code&gt;brew --prefix readline&lt;code&gt;--with-openssl-dir=&lt;/code&gt;brew --prefix openssl&lt;code&gt;--with-iconv-dir=&lt;/code&gt;brew --prefix libiconv&lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="インストール"&gt;インストール&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rbenv install -l&lt;/code&gt;でインストール可能なrubyの候補が出るので好きなものをインストール&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rbenv install 2.1.3&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="おわり"&gt;おわり&lt;/h3&gt;

&lt;p&gt;お　わ　り&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>糖質制限ダイエットしてる</title>
    <link rel="alternate" href="http://blog.supermomonga.com/articles/others/diet.html"/>
    <id>http://blog.supermomonga.com/articles/others/diet.html</id>
    <published>2014-10-15T00:00:00+09:00</published>
    <updated>2014-10-15T01:19:18+09:00</updated>
    <author>
      <name>supermomonga</name>
    </author>
    <content type="html">&lt;h2 id="糖質制限ダイエットしてる"&gt;糖質制限ダイエットしてる&lt;/h2&gt;

&lt;iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=webreferrer11-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00BQ3EAVA" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"&gt;&lt;/iframe&gt;

&lt;iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=webreferrer11-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00LN8JZSQ" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;糖質制限ダイエットについては基本的にはこの2冊だけ読めばよくて、簡単にいえば糖質以外好きなだけ食べいいみたいな感じになる。&lt;/p&gt;

&lt;p&gt;ただし、この方法論で言うところ、量食う人にとっての「好きなだけ」というのを舐めており、そうすると毎日鶏肉だけ1kg以上食べるということになり結果プラスマイナスゼロで変わらないみたいなことになった。&lt;/p&gt;

&lt;p&gt;それだけ鶏肉食べてプラスマイナスゼロに収まったのは糖質制限ダイエットが効いているということではある。&lt;/p&gt;

&lt;p&gt;それを踏まえて今は以下のルールを追加している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基本的に野菜を食べる。野菜なら好きなだけ食べていい。&lt;/li&gt;
&lt;li&gt;サラダに入ってるものは糖質が多少あっても食べていい。&lt;/li&gt;
&lt;li&gt;鶏ささみ・鶏もも（皮なし）は少しなら食べていい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;肉1kgよりは野菜1kg食べたほうがカロリー少ないし健康的だろという方針です。&lt;/p&gt;

&lt;p&gt;コンビニでサラダを買いまくって食べてます。&lt;/p&gt;

&lt;p&gt;サラダパスタはNGですよ。麺が糖質なので。&lt;/p&gt;

&lt;p&gt;コンビニのサラダは種類が色々ある上に作るのがだるくなくてよいので、同じものばっか食べて飽きることがないし、食べたいと思った時にすぐ食べられるので良い。&lt;/p&gt;

&lt;p&gt;長く続けるにあたって、おなかすいた時にすぐ食べられる・作るのがだるくない（もしくは作らなくて良い）というのが重要。&lt;/p&gt;

&lt;p&gt;コストとしてはそもそも野菜が高い上にコンビニの商品なのでより高くなる。安く済ませたいなら自分で野菜買ってきて料理作ってもいいけど、面倒なのが続かない人はコンビニが良い。&lt;/p&gt;

&lt;p&gt;本当はサラダバーがあるファミレスが最強なんだけど、そう近くにあるものでもない。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>実践Vimのkindle版が285円で買える</title>
    <link rel="alternate" href="http://blog.supermomonga.com/articles/vim/jissenvim-sugoiyasui.html"/>
    <id>http://blog.supermomonga.com/articles/vim/jissenvim-sugoiyasui.html</id>
    <published>2014-10-01T00:00:00+09:00</published>
    <updated>2014-10-01T08:04:29+09:00</updated>
    <author>
      <name>supermomonga</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;追記：値付けミスだった様で、現在は約半額の1,120円になっています&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;株式会社KADOKAWAと株式会社ドワンゴの経営統合記念で、kindleで技術書のセールやってるっぽい。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/uploads/2014-10-01-1.png" class="" /&gt;&lt;/p&gt;

&lt;div style="text-align: center; padding: 70px 0;"&gt;
&lt;iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=webreferrer11-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00HWLJI3U" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a target="_blank" href="http://www.amazon.co.jp/s/?_encoding=UTF8&amp;camp=247&amp;creative=7399&amp;keywords=%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E6%9B%B8%E7%B1%8D&amp;linkCode=ur2&amp;qid=1412106603&amp;rh=n%3A2250738051%2Cn%3A2275256051%2Cn%3A2291657051%2Ck%3A%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E6%9B%B8%E7%B1%8D%2Cp_lbr_publishers_browse-bin%3AKADOKAWA%2F%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%BB%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%2Cp_36%3A28500-28500&amp;sort=popularity-rank&amp;tag=webreferrer11-22"&gt;その他285円セール中の技術書が割と一杯ある&lt;/a&gt;ので、色々買った。Dart本とかRedis本とかが285円になってて便利すぎる…&lt;img src="https://ir-jp.amazon-adsystem.com/e/ir?t=webreferrer11-22&amp;l=ur2&amp;o=9" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
