<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-03-14T15:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>実際に読んで分かった、はてなJSのダメなコード</title>
    <link rel="alternate" href="http://blog.url.com/articles/javascript/hatena-js-peropero.html"/>
    <id>http://blog.url.com/articles/javascript/hatena-js-peropero.html</id>
    <published>2014-03-14T15:00:00Z</published>
    <updated>2014-03-15T10:40:03+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="toc_0"&gt;はてなブログJSについて&lt;/h2&gt;

&lt;p&gt;最近話題になってるはてなブログのjavascriptですが、このブログをMiddlemanで構築した時に「はてなブックマークブログパーツ」のjavascriptコードを読んでげんなりしたのを思い出したので、この際ついでにこっちも公にしておこうかと思って記事にします。はてなブログのJSではないという意味でタイトルは釣りです。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;はてなブックマークブログパーツとは&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://b.hatena.ne.jp/guide/blogparts"&gt;はてなブックマークブログパーツ&lt;/a&gt;とは、あなたがお持ちのブログにはてなブックマークの各種情報を貼り付けることができるブログパーツです。はてなが提供しているHTMLタグとjavascriptの読み込みコードを貼り付けることで設置することができます。&lt;/p&gt;

&lt;p&gt;ブログパーツは複数種類あるのですが、今回はこのブログに貼ろうとした「ブックマークのコメントを表示」というパーツのコードを読んでみます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/uploads/2014-03-15-blogparts.png" class="full" /&gt;&lt;/p&gt;

&lt;h2 id="toc_2"&gt;ブログパーツの設置方法&lt;/h2&gt;

&lt;p&gt;さて、&lt;a href="http://b.hatena.ne.jp/guide/blogparts.select?type=blogparts"&gt;ブログパーツの設置方法解説ページ&lt;/a&gt;には、以下の2ステップでブログパーツを貼り付けできると解説されています。&lt;/p&gt;

&lt;h3 id="toc_3"&gt;javascriptの読み込みとデフォルト設定の記述&lt;/h3&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://b.hatena.ne.jp/js/bookmark_blogparts.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentInsertSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'div.hatena-bookmark-marker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'div.article-body-inner'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'div.blogbody div.mainmore'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'div.blogbody div.main'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'div.entry-body-main'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'div.hatena-bookmark-marker a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'div h3 a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'h2.title a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'h2.entry-title a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.posted a'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkPathRegexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/\/archives\/\d+\.html$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkAttribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;1行目では&lt;a href="http://b.hatena.ne.jp/js/bookmark_blogparts.js"&gt;http://b.hatena.ne.jp/js/bookmark_blogparts.js&lt;/a&gt;を読み込み、2行目以降ではどうもオプションの設定を行っている様です。&lt;/p&gt;

&lt;h3 id="toc_4"&gt;ブックマークコメント一覧を表示したい位置にdivタグを設置&lt;/h3&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hatena-bookmark-marker"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display:none;"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"※"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;※）設置ブログ記事ページのURL&lt;/p&gt;

&lt;p&gt;どうやら、&lt;code&gt;hatena-bookmark-marker&lt;/code&gt;というclassが指定されたdivタグの中身がブックマークコメント一覧に置き換えられる様ですね。&lt;/p&gt;

&lt;h3 id="toc_5"&gt;オプション設定の変更&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://developer.hatena.ne.jp/ja/documents/bookmark/misc/comment_blogparts"&gt;はてなブックマークコメント表示ブログパーツ&lt;/a&gt;というページを見ると、オプション一覧の解説とオプションの書き換え方法が記載されています。これらのオプションを使って挙動や見た目をカスタマイズするらしいですね。&lt;/p&gt;

&lt;h2 id="toc_6"&gt;問題点&lt;/h2&gt;

&lt;p&gt;ここで結論から言ってしまうと、このjavascriptスクリプトのオプション指定方法には問題があり、オプションの指定が利きません。&lt;/p&gt;

&lt;p&gt;解説します。&lt;/p&gt;

&lt;h3 id="toc_7"&gt;オプション用プロパティの宣言と上書き&lt;/h3&gt;

&lt;p&gt;このjavascriptコードは、オプション設定をグローバル変数&lt;code&gt;HBBlogParts&lt;/code&gt;というオブジェクトのプロパティを自分の好きな値で宣言することで指定できる様な形式にしています。&lt;/p&gt;

&lt;p&gt;ここで、javascriptのコードを実際に読んでみましょう。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;//alert('start');
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_alreadyShown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shownPermalinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;catchCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;一番最初のコードがこれです。この後この&lt;code&gt;HBBlogParts&lt;/code&gt;というオブジェクトのプロパティに、実際にはてなブックマークコメントを取得してブログのDOMに追加していく処理を持った関数が宣言されていきます。次に後半のコードを見ます。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Design&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useUserCSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssName&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'basic'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listPageCommentLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkCommentLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hatenaRegexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'^https?://[^/]+.hatena.ne.jp/([^/]+)/'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;hatenaRegexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hatenaRegexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHatenaService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'g.hatena.ne.jp'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentInsertSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'div.section'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkCommentInsertSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'div.comment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'div.section'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentInsertSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'div.section'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'div.section h3 a'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkAttribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkPathRegexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/\\d{8}'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCanonicalizedURI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listPageCommentLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permalinkCommentLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;HBBlogPartsFromBookmarklet&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'From Bookmark let'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HBBlogParts.register&lt;/code&gt;という関数が呼ばれていますね。この関数はページのDOMロード完了を監視して、完了した時点で&lt;code&gt;HBBlogParts.start&lt;/code&gt;という関数を呼びます。&lt;code&gt;HBBlogParts.start&lt;/code&gt;は実際にブックマークコメントを取得してDOMを書き換えるメインルーチンです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;あれっちょっとまって…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これ、&lt;code&gt;HBBlogParts.register&lt;/code&gt;関数を呼ぶ直前に、各オプションをデフォルト値で上書きしてませんか？&lt;/p&gt;

&lt;p&gt;実際に、&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listPageCommentLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;HBBlogParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Design&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'t'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;とか指定しても、ブラウザのデベロッパーコンソールで&lt;code&gt;HBBlogParts&lt;/code&gt;のプロパティを見ると、やはりデフォルト値で上書きされてしまっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HBBlogParts.permalinkURI&lt;/code&gt;や&lt;code&gt;HBBlogParts.permalinkPathRegexp&lt;/code&gt;といったブログパーツの動作に不可欠なオプションはさすがに上書きされていないようですが、&lt;code&gt;HBBlogParts.Design&lt;/code&gt;の様な、デフォルト値でもとりあえず動作するといったプロパティの多くがデフォルト値で上書きされています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;オプション設定とはなんだったのか…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;処理の流れからして、どうしてもオプション指定をしたい場合、「&lt;code&gt;HBBlogParts.register&lt;/code&gt;が呼ばれた後」かつ「ページのDOM読み込みが完了して実際に&lt;code&gt;HBBlogParts.start&lt;/code&gt;関数の処理が開始されてしまう前」といったピンポイントのタイミングで、非同期的にこれら&lt;code&gt;HBBlogParts&lt;/code&gt;オブジェクトのプロパティを書き換える必要があります。難易度高い…&lt;/p&gt;

&lt;h2 id="toc_8"&gt;こう改善してほしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;オプションを問答無用でデフォルト値で上書きするのやめて…&lt;/li&gt;
&lt;li&gt;どうせ表示したい位置にdivタグを設置するのだから、グローバル変数のプロパティを書き換えるのでなく、&lt;code&gt;data-*&lt;/code&gt;属性で各オプション設定を指定できるようにしてほしい

&lt;ul&gt;
&lt;li&gt;そうすれば&lt;code&gt;HBBlogParts&lt;/code&gt;という変数でグローバル汚染しなくてもよいのでは。よくわかんないけど。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ついでにこっちもminifyとかgzip配信とかやってほしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_9"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;はてなさんがやる気になってるっぽいですし、なんか直接報告しても反応ないという噂なので、便乗して公にしてブログパーツウィジェットのJSも改善してもらおうという記事でした。ブコメ一覧ウィジェット使いたいです。よろしくお願いします。&lt;/p&gt;

&lt;p&gt;あと、私は普段Rubyばかり書いていてjavascriptにはあまり詳しくはないので、もし間違いがあれば訂正してお詫びします。という予防線を張っておきます。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rubyistが始めるElixir - フィボナッチ編</title>
    <link rel="alternate" href="http://blog.url.com/articles/elixir/elixir-fibonacci.html"/>
    <id>http://blog.url.com/articles/elixir/elixir-fibonacci.html</id>
    <published>2014-03-14T15:00:00Z</published>
    <updated>2014-03-15T10:20:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="toc_0"&gt;Ruby版&lt;/h2&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fib&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;INFINITY&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'n'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Rubyのcaseによるパターンマッチは強力ですね。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Elixir版&lt;/h2&gt;
&lt;pre class="highlight elixir"&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_integer&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;メソッド引数のパターンマッチ・ガードがいい感じですね。&lt;/p&gt;

&lt;p&gt;ただ、パターンガードで型制約はどうなんでしょう。ここは&lt;code&gt;dialyzer&lt;/code&gt;を使いアノテーションで型制約をつけるべきでしょうか。&lt;/p&gt;
&lt;pre class="highlight elixir"&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;non_neg_integer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Fib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ずいぶんと見通しがよくなりましたね。&lt;code&gt;non_neg_integer&lt;/code&gt;を用いることで、nは整数であり、かつ負値でないとしています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ベータ版 ビムの選び方フローチャート</title>
    <link rel="alternate" href="http://blog.url.com/articles/vim/beta-flowchart.html"/>
    <id>http://blog.url.com/articles/vim/beta-flowchart.html</id>
    <published>2014-03-10T15:00:00Z</published>
    <updated>2014-03-11T10:07:37+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="toc_0"&gt;ベータ版 ビムの選び方フローチャート&lt;/h2&gt;

&lt;p&gt;「ビムの選び方」ベータ版に掲載されていたことはないフローチャートです。&lt;/p&gt;

&lt;div class="drawio"&gt;

&lt;div class="mxgraph" style="position:relative;overflow:hidden;width:632px;height:782px;"&gt;&lt;div style="width:1px;height:1px;overflow:hidden;"&gt;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&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;h3 id="toc_1"&gt;補足&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Q. 日本ビムクラブとは？

&lt;ul&gt;
&lt;li&gt;A. わかりません&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. VIM.exe patch for VAIOとは？

&lt;ul&gt;
&lt;li&gt;A. &lt;a href="https://www.google.co.jp/search?q=VIM.exe+patch+for+VAIO+Improvement+and+VAIO+Control+Center"&gt;VIM.exe patch for VAIO Improvement and VAIO Control Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. Vimclipとは？

&lt;ul&gt;
&lt;li&gt;A. &lt;a href="http://vimclip.jp/"&gt;Vimclip OFFICIAL SITE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. FULLVIMとは？

&lt;ul&gt;
&lt;li&gt;A. &lt;a href="http://www.youtube.com/watch?v=fK1szQ_YahE"&gt;Mista Silva - Full Vim EP Launch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. Evilとは？

&lt;ul&gt;
&lt;li&gt;A. &lt;a href="http://www.emacswiki.org/emacs/Evil"&gt;EmacsWiki: Evil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_2"&gt;元ネタ&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.kmc.gr.jp/guidance/2014/pc/beta-flowchart.html"&gt;ベータ版 パソコンの選び方フローチャート&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="toc_3"&gt;おわり&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://atnd.org/events/45072"&gt;Vim Advent Calendar 2013&lt;/a&gt;、101日目の記事でした。&lt;/p&gt;

&lt;script type="text/javascript" src="https://www.draw.io/embed.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>3/21日に東京でVim勉強会を開催します</title>
    <link rel="alternate" href="http://blog.url.com/articles/vim/momongavim-3.html"/>
    <id>http://blog.url.com/articles/vim/momongavim-3.html</id>
    <published>2014-03-05T15:00:00Z</published>
    <updated>2014-03-07T00:54:42+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://atnd.org/events/45072"&gt;Vim Advent Calendar 2013&lt;/a&gt;、96日目の記事になります。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;3/21日に東京でVim勉強会を開催します&lt;/h2&gt;

&lt;p&gt;今日はtips記事でもプラグインリリース記事でもなく、Vim勉強会のお知らせです。&lt;/p&gt;

&lt;p&gt;私が主催しているVimの勉強会、momonga.vimの第三回が今月の21日に開催されます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://partake.in/events/52a7b249-5183-4f1a-9e4f-22c1f0e436a5"&gt;momonga.vim #3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勉強会と書きましたが、実質はもくもく会で、各々がVimに関して好きなことをただひたすらやるみたいな会です。&lt;/p&gt;

&lt;p&gt;第二回では十数人規模の会場で大体5時間くらいやったのですが、予想以上に申し込みがあり、何人かの方が残念ながら参加できないということがありました。
そのため高まった私が今回は20人規模の会場を押さえ、かつほぼ丸一日貸しきるみたいな感じになっています。&lt;/p&gt;

&lt;p&gt;3月6日現時点で申込数は13人で、まだあと7人の空きがあります。
会場は一日貸し切りですが、途中参加・途中離脱OKなゆるふわ会ですので、数時間だけ参加してみようかなという方もぜひ来てみてください。&lt;/p&gt;

&lt;p&gt;場所は&lt;a href="http://www.musashino.or.jp/place/_1150.html"&gt;武蔵野プレイスのスペースE&lt;/a&gt;です。おしゃれ！&lt;/p&gt;

&lt;p&gt;参加費は1人500円で、飲み物やお菓子などが適当に用意されます。
昼食や夕食を食べる場合や、二次会に参加する場合はそのお金は別途各々が払うみたいな感じです。&lt;/p&gt;

&lt;p&gt;タイムスケジュールや場所などのより詳しい情報や、参加の申し込みは&lt;a href="http://partake.in/events/52a7b249-5183-4f1a-9e4f-22c1f0e436a5"&gt;momonga.vim #3のPARTAKEページ&lt;/a&gt;からお願いします。&lt;/p&gt;

&lt;p&gt;momonga.vim は初心者歓迎ですし、実際に今回&lt;code&gt;sudo yum install vim&lt;/code&gt;から始めるみたいな人も来る模様です。むしろ俺は&lt;a href="http://d.hatena.ne.jp/tarao/20130303/evil_intro"&gt;Evil&lt;/a&gt;の設定を弄るみたいな人でも大丈夫だと思いますので、よろしければぜひお気軽に。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;おわり&lt;/h2&gt;

&lt;p&gt;おわり&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ansuzのやつ</title>
    <link rel="alternate" href="http://blog.url.com/articles/ruby/ansuz.html"/>
    <id>http://blog.url.com/articles/ruby/ansuz.html</id>
    <published>2014-02-15T15:00:00Z</published>
    <updated>2014-02-16T08:17:17+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://funisaya-ac2013.herokuapp.com/"&gt;ansuz&lt;/a&gt;4番目の担当でした。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;担当の二週間の、前半一週間で、「これは自分のものとしてともかくやるんだ」というものを制作してください。「これは自分のものとしてともかくやるんだ」ということだけが重要です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;はい。私はコードを書くしかないと思っているので、コードを書きました。そして音ができます。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;書きます&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/uploads/2014-02-16-7.56.26.png" class="full" /&gt;&lt;/p&gt;

&lt;p&gt;プログラムのソースコードを食べて音をつくるものができます。
ごく基本的な音楽の知識しかないので、コード進行がいい感じになるくらいのかしこさしかないです。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;食べさせる&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/uploads/2014-02-16-7.56.52.png" class="full" /&gt;&lt;/p&gt;

&lt;p&gt;自分自身を食べさせます。自分を音楽にします。quineみたいですね、と思ったけどよく考えたら全然quineみたいではないです。&lt;/p&gt;

&lt;p&gt;midiができます。&lt;/p&gt;

&lt;h2 id="toc_2"&gt;調整&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/uploads/2014-02-16-7.58.02.png" class="full" /&gt;&lt;/p&gt;

&lt;p&gt;GarageBandで調整しましょう&lt;/p&gt;

&lt;h2 id="toc_3"&gt;できる&lt;/h2&gt;

&lt;iframe class="soundcloud" width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/135025481&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;p&gt;できた。&lt;/p&gt;

&lt;h2 id="toc_4"&gt;おわり&lt;/h2&gt;

&lt;p&gt;おわり。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>プロジェクトのハンドリングを効率化するプラグイン、ProjectLocal.vimをリリースしました。</title>
    <link rel="alternate" href="http://blog.url.com/articles/vim/projectlocal-vim-released.html"/>
    <id>http://blog.url.com/articles/vim/projectlocal-vim-released.html</id>
    <published>2014-02-04T15:00:00Z</published>
    <updated>2014-02-05T01:57:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://atnd.org/events/45072"&gt;Vim Advent Calendar 2013&lt;/a&gt;、66日目の記事になります。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;ProjectLocal.vimをリリースしました&lt;/h2&gt;

&lt;p&gt;プロジェクトのハンドリングを効率化する薄い機能を提供するプラグイン、ProjectLocal.vimをリリースしましたのでご紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/supermomonga/projectlocal.vim"&gt;https://github.com/supermomonga/projectlocal.vim&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="toc_1"&gt;ProjectLocal.vimの機能&lt;/h2&gt;

&lt;p&gt;プロジェクトのルートディレクトリに&lt;code&gt;Projectfile&lt;/code&gt;という名前のファイルを配置すると、そのディレクトリは1つのプロジェクトとして扱われるようになり、ディレクトリ以下のファイルを開いた時に以下の2つの機能が発動します。&lt;/p&gt;

&lt;h3 id="toc_2"&gt;1. プロジェクトルートディレクトリの設定&lt;/h3&gt;

&lt;p&gt;ProjectLocal.vimは、現在開いているファイルのプロジェクトのルートディレクトリを、ファイル（バッファ）のローカル変数に自動でセットします。これにより、プロジェクト内のどのファイルを開いた時も、常にバッファがプロジェクトルートの位置を知ることができます。具体的には、&lt;code&gt;b:projectlocal_root_dir&lt;/code&gt;というバッファローカル変数にパスがセットされます。&lt;/p&gt;

&lt;h3 id="toc_3"&gt;2. プロジェクト用filetypeの自動設定&lt;/h3&gt;

&lt;p&gt;プロジェクト内のファイルを開いた時、そのファイルのfiletypeに、予め設定したfiletypeを付加することができます。たとえば、&lt;code&gt;.rb&lt;/code&gt;ファイルを開いた時、通常は&lt;code&gt;ruby&lt;/code&gt;というfiletypeが設定されますが、自動で&lt;code&gt;rails&lt;/code&gt;というfiletypeが付加されるように設定することが可能になります。ちなみに、Vimにおいて1つのバッファに複数のfiletypeを割り当てたい時は、それらを&lt;code&gt;.&lt;/code&gt;（ドット記号）で連結します。この場合は&lt;code&gt;ruby.rails&lt;/code&gt;になるわけですね。&lt;/p&gt;

&lt;p&gt;この設定はプロジェクト毎に変えることができます。方法は簡単で、&lt;code&gt;Projectfile&lt;/code&gt;の中に、設定したいfiletypeをカンマ区切りもしくは改行区切りで記載するだけです。&lt;/p&gt;

&lt;h2 id="toc_4"&gt;ProjectLocal.vimの利用例&lt;/h2&gt;

&lt;p&gt;ProjectLocal.vimは、それ単体では利便性に直接影響することはない、薄い機能を持った低レイヤプラグインです。ここでは、ProjectLocalの便利な利用例をご紹介します。&lt;/p&gt;

&lt;h3 id="toc_5"&gt;プロジェクト内のファイルのみ検索するUniteコマンドを呼び出す&lt;/h3&gt;

&lt;p&gt;特定のプロジェクトに関するプログラミングを行っている時、そのプロジェクトに関係するファイルのみを対象に検索したいことがあると思います。そのような場合、gitなどのVCSで管理されているディレクトリはUnite.vimの標準機能で検索を行うことができますが、すべてのプロジェクトが必ずしもVCSで管理されているとは限りませんし、プロジェクト内でも更に細かくスコープを分けたいなどの要望があると思います。&lt;/p&gt;

&lt;p&gt;そういった場合、ProjectLocal.vimにて任意の場所に&lt;code&gt;Projectfile&lt;/code&gt;を配置することで、簡単にプロジェクト、もしくはプロジェクトの一部のファイルを検索することができるようになります。&lt;/p&gt;

&lt;h4 id="toc_6"&gt;.vimrc&lt;/h4&gt;
&lt;pre class="highlight viml"&gt;nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; Unite_project_files&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-start-insert'&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; Unite_project_files&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b:projectlocal_root_dir'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    execute &lt;span class="s1"&gt;':Unite file_rec/async:'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;b:projectlocal_root_dir&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;a:options&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    echo &lt;span class="s2"&gt;"You are not in any project."&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Unite.vimのfire&lt;em&gt;rec/asyncというソースは、引数として検索対象のディレクトリを取ることができます。これを利用して、`b:projectlocal&lt;/em&gt;root_dir`が存在する場合はその値を引数として渡す関数を実装し、キーバインドに割り当てています。&lt;/p&gt;

&lt;h3 id="toc_7"&gt;プロジェクト毎に最適なUniteコマンドを呼び出す&lt;/h3&gt;

&lt;p&gt;同じキーバインドでも、状況によって最適な内容を実行してくれたら素敵です。ここでは、Unite.vimを例に、普段はディスク全体を対象にファイルを列挙するが、railsプロジェクトを開いている時には&lt;code&gt;unite-rails&lt;/code&gt;というRails用のUnite sourceを呼び出すといった設定を行ってみます。&lt;/p&gt;

&lt;h4 id="toc_8"&gt;Projectfile&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;rails
&lt;/pre&gt;
&lt;h4 id="toc_9"&gt;.vimrc&lt;/h4&gt;
&lt;pre class="highlight viml"&gt;nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;  &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Unite file_mru&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;s:unite_rails_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;  &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Unite rails&lt;span class="sr"&gt;/model rails/&lt;/span&gt;controller rails&lt;span class="sr"&gt;/view rails/&lt;/span&gt;db rails&lt;span class="sr"&gt;/config rails/&lt;/span&gt;javascript rails&lt;span class="sr"&gt;/stylesheet rails/&lt;/span&gt;helper rails/mailer&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

aug MyAutoCmd
  &lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; *rails* &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;s:unite_rails_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
aug END
&lt;/pre&gt;
&lt;p&gt;このように、&lt;code&gt;&amp;lt;Space&amp;gt;j&lt;/code&gt;というキーバインドに対して、普段は&lt;code&gt;file_mru&lt;/code&gt;ソースを呼び出すものの、railsのプロジェクトでは&lt;code&gt;unite-rails&lt;/code&gt;のソースを呼び出すといった設定を完結に記載することができました。AutoCmdのパターンは完全一致なので、&lt;code&gt;*&lt;/code&gt;で囲むことで&lt;code&gt;ruby.rails&lt;/code&gt;などといったfiletypeにもマッチする様な工夫を行っています。&lt;/p&gt;

&lt;h2 id="toc_10"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ProjectLocal.vimを利用することで、現在どのプロジェクトのファイルを開いているのか、プロジェクトの種類はなんなのか、プロジェクトのルートディレクトリはどこなのか、といった情報が提供されるようになり、プロジェクトに依存する固有の設定が格段に行い易くなりました。小さい実装ながらも強力なプラグインですので、皆さんもぜひお試し頂ければと思います。&lt;/p&gt;
</content>
  </entry>
</feed>
